{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leopoldo.zugasti\\\\Desktop\\\\DatasetInsights\\\\streamlit_components\\\\gridviewsettings\\\\gridviewsettings\\\\frontend\\\\src\\\\GridViewSettings.tsx\";\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useEffect } from \"react\";\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { styled } from \"@material-ui/core\";\nlet state = \"idle\";\n\nconst GridViewSettings = ({\n  args,\n  disabled\n}) => {\n  useEffect(() => {\n    Streamlit.setFrameHeight(); // Button was just clicked, and component code reruns\n    // But we don't want to set component value to false yet!\n\n    if (state === \"clicked\") {\n      state = \"reset\";\n    } // A rerun was done, executing the component code again\n    // So we can safely set the component value to False (which triggers another rerun)\n    else if (state === \"reset\") {\n        Streamlit.setComponentValue(false);\n        state = \"idle\";\n      }\n  });\n\n  const handleClick = () => {\n    Streamlit.setComponentValue(true);\n    console.log('Hello');\n    state = \"clicked\";\n  };\n\n  const Arrow = styled(ArrowForwardIosIcon)({});\n  const FlippedArrow = styled(ArrowForwardIosIcon)({\n    transform: \"rotate(180deg)\"\n  });\n  const FixedMarginIconButton = styled(IconButton)({\n    marginBottom: \"10px\"\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(FixedMarginIconButton, {\n    color: \"primary\",\n    onClick: handleClick,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FlippedArrow, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(FixedMarginIconButton, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Arrow, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  })));\n};\n/*class GridViewSettings extends StreamlitComponentBase {\n  public render = (): ReactNode => {\n\n    const FlippedArrow = styled(ArrowForwardIosIcon)({\n      transform: \"rotate(180deg)\"\n    })\n    const FixedMarginIconButton = styled(IconButton)({\n      marginBottom:\"10px\"\n    })\n\n    return (\n      <div>\n        <FixedMarginIconButton color=\"primary\">\n          <Arrow fontSize=\"large\"/>\n        </FixedMarginIconButton>\n      </div>\n\n    )\n  }\n}*/\n\n\nexport default withStreamlitConnection(GridViewSettings);","map":{"version":3,"sources":["C:/Users/leopoldo.zugasti/Desktop/DatasetInsights/streamlit_components/gridviewsettings/gridviewsettings/frontend/src/GridViewSettings.tsx"],"names":["Streamlit","withStreamlitConnection","React","useEffect","IconButton","ArrowForwardIosIcon","styled","state","GridViewSettings","args","disabled","setFrameHeight","setComponentValue","handleClick","console","log","Arrow","FlippedArrow","transform","FixedMarginIconButton","marginBottom"],"mappings":";AAAA,SACEA,SADF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,IAA2BC,SAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAOA,OAAOC,mBAAP,MAAgC,oCAAhC;AAGA,SAASC,MAAT,QAAuB,mBAAvB;AAEA,IAAIC,KAAK,GAAG,MAAZ;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAD,KAA4B;AACnDP,EAAAA,SAAS,CAAC,MAAM;AACdH,IAAAA,SAAS,CAACW,cAAV,GADc,CAGd;AACA;;AACA,QAAIJ,KAAK,KAAK,SAAd,EAAyB;AACvBA,MAAAA,KAAK,GAAG,OAAR;AACD,KAFD,CAIE;AACF;AALA,SAMK,IAAIA,KAAK,KAAK,OAAd,EAAuB;AAC1BP,QAAAA,SAAS,CAACY,iBAAV,CAA4B,KAA5B;AACAL,QAAAA,KAAK,GAAG,MAAR;AACD;AACF,GAfQ,CAAT;;AAiBA,QAAMM,WAAW,GAAG,MAAM;AACxBb,IAAAA,SAAS,CAACY,iBAAV,CAA4B,IAA5B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAR,IAAAA,KAAK,GAAG,SAAR;AACD,GAJD;;AAOA,QAAMS,KAAK,GAAGV,MAAM,CAACD,mBAAD,CAAN,CAA4B,EAA5B,CAAd;AAEA,QAAMY,YAAY,GAAGX,MAAM,CAACD,mBAAD,CAAN,CAA4B;AAC/Ca,IAAAA,SAAS,EAAE;AADoC,GAA5B,CAArB;AAGA,QAAMC,qBAAqB,GAAGb,MAAM,CAACF,UAAD,CAAN,CAAmB;AAC/CgB,IAAAA,YAAY,EAAC;AADkC,GAAnB,CAA9B;AAIA,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,qBAAD;AAAuB,IAAA,KAAK,EAAC,SAA7B;AACuB,IAAA,OAAO,EAAEP,WADhC;AAEuB,IAAA,QAAQ,EAAEH,QAFjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,eAOE,oBAAC,qBAAD;AAAuB,IAAA,KAAK,EAAC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,QAAQ,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPF,CADA;AAaD,CA/CD;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeT,uBAAuB,CAACO,gBAAD,CAAtC","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode, useEffect} from \"react\"\nimport IconButton from '@material-ui/core/IconButton';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport KeyboardVoiceIcon from '@material-ui/icons/KeyboardVoice';\nimport Icon from '@material-ui/core/Icon';\nimport SaveIcon from '@material-ui/icons/Save';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { red } from \"@material-ui/core/colors\"\nimport { ArrowBackIos } from \"@material-ui/icons\"\nimport { styled } from \"@material-ui/core\"\n\nlet state = \"idle\"\n\nconst GridViewSettings = ({args, disabled }: any) => {\n  useEffect(() => {\n    Streamlit.setFrameHeight()\n\n    // Button was just clicked, and component code reruns\n    // But we don't want to set component value to false yet!\n    if (state === \"clicked\") {\n      state = \"reset\"\n    }\n\n      // A rerun was done, executing the component code again\n    // So we can safely set the component value to False (which triggers another rerun)\n    else if (state === \"reset\") {\n      Streamlit.setComponentValue(false)\n      state = \"idle\"\n    }\n  })\n\n  const handleClick = () => {\n    Streamlit.setComponentValue(true)\n    console.log('Hello')\n    state = \"clicked\"\n  }\n\n\n  const Arrow = styled(ArrowForwardIosIcon)({\n  })\n  const FlippedArrow = styled(ArrowForwardIosIcon)({\n    transform: \"rotate(180deg)\"\n  })\n  const FixedMarginIconButton = styled(IconButton)({\n    marginBottom:\"10px\"\n  })\n\n  return(\n  <div>\n    <FixedMarginIconButton color=\"primary\"\n                           onClick={handleClick}\n                           disabled={disabled}\n    >\n      <FlippedArrow fontSize=\"large\"/>\n    </FixedMarginIconButton>\n    <FixedMarginIconButton color=\"primary\">\n      <Arrow fontSize=\"large\"/>\n    </FixedMarginIconButton>\n  </div>\n  )\n}\n\n/*class GridViewSettings extends StreamlitComponentBase {\n  public render = (): ReactNode => {\n\n    const FlippedArrow = styled(ArrowForwardIosIcon)({\n      transform: \"rotate(180deg)\"\n    })\n    const FixedMarginIconButton = styled(IconButton)({\n      marginBottom:\"10px\"\n    })\n\n    return (\n      <div>\n        <FixedMarginIconButton color=\"primary\">\n          <Arrow fontSize=\"large\"/>\n        </FixedMarginIconButton>\n      </div>\n\n    )\n  }\n}*/\n\nexport default withStreamlitConnection(GridViewSettings)\n"]},"metadata":{},"sourceType":"module"}