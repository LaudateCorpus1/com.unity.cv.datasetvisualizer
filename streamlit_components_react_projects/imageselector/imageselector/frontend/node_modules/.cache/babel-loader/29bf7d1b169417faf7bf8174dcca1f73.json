{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leopoldo.zugasti\\\\Desktop\\\\DatasetInsights\\\\streamlit_components\\\\gridviewsettings\\\\gridviewsettings\\\\frontend\\\\src\\\\GridViewSettings.tsx\";\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useEffect, useState } from \"react\";\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { styled } from \"@material-ui/core\";\nlet state = {\n  buttonState: \"idle\",\n  startAt: 0\n};\n\nconst GridViewSettings = ({\n  props,\n  disabled\n}) => {\n  const [value, setValue] = useState({});\n  useEffect(() => {\n    Streamlit.setFrameHeight(); // Button was just clicked, and component code reruns\n    // But we don't want to set component value to false yet!\n\n    if (state.buttonState === \"clicked\") {\n      state.buttonState = \"reset\";\n    } // A rerun was done, executing the component code again\n    // So we can safely set the component value to False (which triggers another rerun)\n    else if (state.buttonState === \"reset\") {\n        Streamlit.setComponentValue({\n          left: false,\n          right: false\n        });\n        state.buttonState = \"idle\";\n      }\n  });\n\n  const handleClick = side => {\n    if (side === \"left\") {\n      setValue(value + 1);\n      Streamlit.setComponentValue(state.startAt);\n    } else if (side === \"right\") {\n      setValue(value - 1);\n      Streamlit.setComponentValue(state.startAt);\n    }\n\n    state.buttonState = \"clicked\";\n  };\n\n  const Arrow = styled(ArrowForwardIosIcon)({});\n  const FlippedArrow = styled(ArrowForwardIosIcon)({\n    transform: \"rotate(180deg)\"\n  });\n  const FixedMarginIconButton = styled(IconButton)({\n    marginBottom: \"10px\"\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"relative\",\n      left: \"50%\",\n      display: \"block\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FixedMarginIconButton, {\n    color: \"primary\",\n    disabled: disabled,\n    onClick: () => handleClick(\"left\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FlippedArrow, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"$\", state.startAt), /*#__PURE__*/React.createElement(FixedMarginIconButton, {\n    color: \"primary\",\n    disabled: disabled,\n    onClick: () => handleClick(\"right\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Arrow, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }))));\n};\n/*class GridViewSettings extends StreamlitComponentBase {\n  public render = (): ReactNode => {\n\n    const FlippedArrow = styled(ArrowForwardIosIcon)({\n      transform: \"rotate(180deg)\"\n    })\n    const FixedMarginIconButton = styled(IconButton)({\n      marginBottom:\"10px\"\n    })\n\n    return (\n      <div>\n        <FixedMarginIconButton color=\"primary\">\n          <Arrow fontSize=\"large\"/>\n        </FixedMarginIconButton>\n      </div>\n\n    )\n  }\n}*/\n\n\nexport default withStreamlitConnection(GridViewSettings);","map":{"version":3,"sources":["C:/Users/leopoldo.zugasti/Desktop/DatasetInsights/streamlit_components/gridviewsettings/gridviewsettings/frontend/src/GridViewSettings.tsx"],"names":["Streamlit","withStreamlitConnection","React","useEffect","useState","IconButton","ArrowForwardIosIcon","styled","state","buttonState","startAt","GridViewSettings","props","disabled","value","setValue","setFrameHeight","setComponentValue","left","right","handleClick","side","Arrow","FlippedArrow","transform","FixedMarginIconButton","marginBottom","width","position","display","marginLeft","marginRight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { useEffect, useState } from \"react\"\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport { styled, TextField } from \"@material-ui/core\"\n\nlet state = {buttonState: \"idle\", startAt: 0}\n\nconst GridViewSettings = ({props, disabled }: any) => {\n  const [value, setValue] = useState({})\n  useEffect(() => {\n    Streamlit.setFrameHeight()\n\n    // Button was just clicked, and component code reruns\n    // But we don't want to set component value to false yet!\n    if (state.buttonState === \"clicked\") {\n      state.buttonState = \"reset\"\n    }\n\n      // A rerun was done, executing the component code again\n    // So we can safely set the component value to False (which triggers another rerun)\n    else if (state.buttonState === \"reset\") {\n      Streamlit.setComponentValue({left: false, right: false})\n      state.buttonState = \"idle\"\n    }\n  })\n\n  const handleClick = (side: string) => {\n    if(side === \"left\") {\n      setValue((value + 1))\n      Streamlit.setComponentValue(state.startAt)\n    } else if (side === \"right\") {\n      setValue((value - 1))\n      Streamlit.setComponentValue(state.startAt)\n    }\n    state.buttonState = \"clicked\"\n  }\n\n\n  const Arrow = styled(ArrowForwardIosIcon)({\n  })\n  const FlippedArrow = styled(ArrowForwardIosIcon)({\n    transform: \"rotate(180deg)\"\n  })\n  const FixedMarginIconButton = styled(IconButton)({\n    marginBottom:\"10px\"\n  })\n\n  return(\n  <div style={{width:\"100%\"}}>\n    <div style={{position: \"relative\", left: \"50%\", display: \"block\", marginLeft: \"auto\", marginRight:\"auto\"}}>\n      <FixedMarginIconButton color=\"primary\"\n                             disabled={disabled}\n                             onClick={() => handleClick(\"left\")}\n      >\n        <FlippedArrow fontSize=\"large\"/>\n      </FixedMarginIconButton>\n      <h1>${state.startAt}</h1>\n      <FixedMarginIconButton color=\"primary\"\n                             disabled={disabled}\n                             onClick={() => handleClick(\"right\")}\n      >\n        <Arrow fontSize=\"large\"/>\n      </FixedMarginIconButton>\n    </div>\n  </div>\n  )\n}\n\n/*class GridViewSettings extends StreamlitComponentBase {\n  public render = (): ReactNode => {\n\n    const FlippedArrow = styled(ArrowForwardIosIcon)({\n      transform: \"rotate(180deg)\"\n    })\n    const FixedMarginIconButton = styled(IconButton)({\n      marginBottom:\"10px\"\n    })\n\n    return (\n      <div>\n        <FixedMarginIconButton color=\"primary\">\n          <Arrow fontSize=\"large\"/>\n        </FixedMarginIconButton>\n      </div>\n\n    )\n  }\n}*/\n\nexport default withStreamlitConnection(GridViewSettings)\n"]},"metadata":{},"sourceType":"module"}