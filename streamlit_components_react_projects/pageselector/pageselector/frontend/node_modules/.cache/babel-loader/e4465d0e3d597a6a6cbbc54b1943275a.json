{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leopoldo.zugasti\\\\Desktop\\\\DatasetInsights\\\\streamlit_components\\\\gridviewsettings\\\\gridviewsettings\\\\frontend\\\\src\\\\GridViewSettings.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\n\nclass GridViewSettings extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n\n    this.render = () => {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 7\n        }\n      }, \"Hello, \", name, \"! \\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.onClicked,\n        disabled: this.props.disabled,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 9\n        }\n      }, \"Click Me!\"));\n    };\n\n    this.onClicked = () => {};\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(GridViewSettings);","map":{"version":3,"sources":["C:/Users/leopoldo.zugasti/Desktop/DatasetInsights/streamlit_components/gridviewsettings/gridviewsettings/frontend/src/GridViewSettings.tsx"],"names":["StreamlitComponentBase","withStreamlitConnection","React","GridViewSettings","render","name","onClicked","props","disabled"],"mappings":";AAAA,SAEEA,sBAFF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,MAAiC,OAAjC;AAEA;AACA;AACA;AACA;;AACA,MAAMC,gBAAN,SAA+BH,sBAA/B,CAA6D;AAAA;AAAA;;AAAA,SAEpDI,MAFoD,GAE3C,MAAiB;AAE/B,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACUC,IADV,yBAEE;AACE,QAAA,OAAO,EAAE,KAAKC,SADhB;AAEE,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,QAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,CADF;AAWD,KAf0D;;AAAA,SAkBnDF,SAlBmD,GAkBvC,MAAY,CAE/B,CApB0D;AAAA;;AAAA,C,CAuB7D;AACA;AACA;AACA;AACA;;;AACA,eAAeL,uBAAuB,CAACE,gBAAD,CAAtC","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass GridViewSettings extends StreamlitComponentBase<State> {\n\n  public render = (): ReactNode => {\n\n    return (\n      <span>\n        Hello, {name}! &nbsp;\n        <button\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n        >\n          Click Me!\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(GridViewSettings)\n"]},"metadata":{},"sourceType":"module"}