{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leopoldo.zugasti\\\\Desktop\\\\DatasetInsights\\\\streamlit_components\\\\gridviewsettings\\\\gridviewsettings\\\\frontend\\\\src\\\\GridViewSettings.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport KeyboardVoiceIcon from '@material-ui/icons/KeyboardVoice';\nimport Icon from '@material-ui/core/Icon';\nimport SaveIcon from '@material-ui/icons/Save';\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\n\nclass GridViewSettings extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n\n    this.render = () => {\n      const classes = useStyles();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        className: classes.button,\n        startIcon: /*#__PURE__*/React.createElement(DeleteIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 20\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }\n      }, \"Delete\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        className: classes.button,\n        endIcon: /*#__PURE__*/React.createElement(Icon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 18\n          }\n        }, \"send\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 7\n        }\n      }, \"Send\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"default\",\n        className: classes.button,\n        startIcon: /*#__PURE__*/React.createElement(CloudUploadIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 20\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 7\n        }\n      }, \"Upload\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        disabled: true,\n        color: \"secondary\",\n        className: classes.button,\n        startIcon: /*#__PURE__*/React.createElement(KeyboardVoiceIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 20\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 7\n        }\n      }, \"Talk\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"small\",\n        className: classes.button,\n        startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 20\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }\n      }, \"Save\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        className: classes.button,\n        startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 20\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }\n      }, \"Save\"));\n    };\n\n    this.onClicked = () => {};\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(GridViewSettings);","map":{"version":3,"sources":["C:/Users/leopoldo.zugasti/Desktop/DatasetInsights/streamlit_components/gridviewsettings/gridviewsettings/frontend/src/GridViewSettings.tsx"],"names":["StreamlitComponentBase","withStreamlitConnection","React","Button","makeStyles","DeleteIcon","CloudUploadIcon","KeyboardVoiceIcon","Icon","SaveIcon","useStyles","theme","button","margin","spacing","GridViewSettings","render","classes","onClicked"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport KeyboardVoiceIcon from '@material-ui/icons/KeyboardVoice';\nimport Icon from '@material-ui/core/Icon';\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass GridViewSettings extends StreamlitComponentBase {\n\n  public render = (): ReactNode => {\n    const classes = useStyles();\n\n    return (<div>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        className={classes.button}\n        startIcon={<DeleteIcon />}\n      >\n        Delete\n      </Button>\n      {/* This Button uses a Font Icon, see the installation instructions in the Icon component docs. */}\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        endIcon={<Icon>send</Icon>}\n      >\n        Send\n      </Button>\n      <Button\n        variant=\"contained\"\n        color=\"default\"\n        className={classes.button}\n        startIcon={<CloudUploadIcon />}\n      >\n        Upload\n      </Button>\n      <Button\n        variant=\"contained\"\n        disabled\n        color=\"secondary\"\n        className={classes.button}\n        startIcon={<KeyboardVoiceIcon />}\n      >\n        Talk\n      </Button>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"small\"\n        className={classes.button}\n        startIcon={<SaveIcon />}\n      >\n        Save\n      </Button>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"large\"\n        className={classes.button}\n        startIcon={<SaveIcon />}\n      >\n        Save\n      </Button>\n    </div>)\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(GridViewSettings)\n"]},"metadata":{},"sourceType":"module"}